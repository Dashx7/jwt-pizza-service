const request = require('supertest');
const app = require('../service');
const DB = require('../database/database.js');
const utils = require('../routes/util.js');

test('Empty test', () => {
    expect(true).toBe(true);
});

const testUser = utils.createUser();
let testUserAuthToken;
let adminUserAuthToken;
let newMenuItem;

beforeAll(async () => {
    adminUserAuthToken = await utils.getAdminAuthToken();
    newMenuItem = { title: 'Student Pizza#' + utils.randomText(10), description: 'No topping, no sauce, just carbs', image: 'pizza9.png', price: 0.0001 };
    testUserAuthToken = await utils.newUsersAuthToken();
});

test('get menu', async () => {
    const res = await request(app).get('/api/order/menu');
    expect(res.status).toBe(200);
    expect(Array.isArray(res.body)).toBe(true);
});

describe('Adding menu items', () => {
test('add menu item', async () => {
    const res = await request(app)
        .put('/api/order/menu')
        .send(newMenuItem)
        .set('Authorization', `Bearer ${await utils.getAdminAuthToken()}`);
    expect(res.status).toBe(200);
    expect(Array.isArray(res.body)).toBe(true);
    const receivedArray = res.body;
    const itemWithoutId = item => ({ // Getting around the fact that the id is generated by the database
        description: item.description,
        image: item.image,
        price: item.price,
        title: item.title
      });
    expect(receivedArray.map(itemWithoutId)).toContainEqual(itemWithoutId(newMenuItem));
});

test('cant add menu item without admin role', async () => {
    const res = await request(app)
        .put('/api/order/menu')
        .send(newMenuItem)
        .set('Authorization', `Bearer ${testUserAuthToken}`);
    expect(res.status).toBe(403);
});
});

describe('Orders', () => {

test('get orders', async () => {
    const res = await request(app)
        .get('/api/order')
        .set('Authorization', `Bearer ${testUserAuthToken}`);
    expect(res.status).toBe(200);
    expect(res.body.dinerId).toBeGreaterThan(0);
    expect(Array.isArray(res.body.orders)).toBe(true);
});

// Node Fetch doesn't work, wait until opencore legacy patcher
// test('create order', async () => {
//     const res = await request(app)
//         .post('/api/order')
//         .send({ franchiseId: 1, storeId: 1, items: [{ menuId: 1, description: 'Veggie', price: 0.05 }] })
//         .set('Authorization', `Bearer ${testUserAuthToken}`);
//     expect(res.status).toBe(200);
//     expect(res.body.order.franchiseId).toBe(1);
//     expect(res.body.order.storeId).toBe(1);
//     expect(Array.isArray(res.body.order.items)).toBe(true);
//     expect(res.body.order.items[0].menuId).toBe(1);
//     expect(res.body.order.items[0].description).toBe('Veggie');
//     expect(res.body.order.items[0].price).toBe(0.05);
// });

test('cant create order without auth', async () => {
    const res = await request(app)
        .post('/api/order')
        .send({ franchiseId: 1, storeId: 1, items: [{ menuId: 1, description: 'Veggie', price: 0.05 }] });
    expect(res.status).toBe(401);
});

test('cant create order without items', async () => {
    const res = await request(app)
        .post('/api/order')
        .set('Authorization', `Bearer ${testUserAuthToken}`);
    expect(res.status).toBe(500);
});

});